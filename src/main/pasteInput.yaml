name: pasteInput
bindDescription: "`Wait selector: '${selector}' and type text: '${text}' in input`"
needSelectors: ['selector']
needData: ['text']
allowOptions: ['hidden', 'visible', 'timeDelayBeforeWait', 'timeDelayAfterWait', 'noClearInput', 'waitingTime']
logOptions: { logChildren: false }

runTest:
  - waitForSelector:
      description: Wait selector
      bindSelector: { selector: selector }

  - blank:
      description: Paste some text in field INPUT
      needSelectors: ['selector']
      needData: ['text']
      allowOptions: ['noClearInput']
      bindSelector: { selector: selector }
      bindData: { text: text }
      inlineJS: >
        const { selector } = this.selectors;
        const { text } = this.data;
        const { noClearInput } = this.options;

        const element = await this.getElement(selector);

        const logEntry = `Type in selector: '${selector}', text: '${text}'`;

        if (!element) {
          await this.log({ text: logEntry, element, level: 'error' });
          throw { message: logEntry };
        }

        if (this.getEngine('playwright')) {
          await this.page.evaluate(
            ({ element, text, noClearInput }) => {
                if (noClearInput) {
                  text = element.value + String(text);
                }
                element.value = String(text);
                element.dispatchEvent(new Event('change'));
            },
            { element, text, noClearInput },
          );
        } else if (this.getEngine('puppeteer')) {
          await this.page.evaluate(
            (element, text, noClearInput) => {
                if (noClearInput) {
                  text = element.value + String(text);
                }
                element.value = String(text);
                element.dispatchEvent(new Event('change'));
            },
            element, text, noClearInput
          );
        } else {
          throw new Error(`There is unknown engine ${this.getEngine()}`);
        }

        await this.log({ text: logEntry, element });

        await element.dispose();
